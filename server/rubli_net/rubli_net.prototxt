layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param {
    shape {
      dim: 1
      dim: 1
      dim: 115
      dim: 230
    }
  }
}
layer {
    name: "conv1"
    type: "Convolution"
    
    bottom: "data"
    top:    "conv1"
    
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }

    convolution_param {
        num_output: 128
        
        kernel_w: 10
        kernel_h: 5
        stride_w: 4
        stride_h: 2
        
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}
layer {
    name: "relu1"
    type: "ReLU"
    
    bottom: "conv1"
    top:    "conv1"
}

layer {
    name: "pool1"
    type: "Pooling"
    
    bottom: "conv1"
    top:    "pool1"

    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "conv2"
    type: "Convolution"

    bottom: "pool1"
    top:    "conv2"
  
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }
  
    convolution_param {
        num_output: 256
        
        pad: 2
        kernel_size: 5
    
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}
layer {
    name: "relu2"
    type: "ReLU"
  
    bottom: "conv2"
    top:    "conv2"
}

layer {
    name: "pool2"
    type: "Pooling"
  
    bottom: "conv2"
    top:    "pool2"
  
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "conv3"
    type: "Convolution"

    bottom: "pool2"
    top:    "conv3"
  
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }
    
    convolution_param {
        num_output: 512
        
        pad: 1
        kernel_size: 3
        
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}

layer {
    name: "relu3"
    type: "ReLU"
    
    bottom: "conv3"
    top:    "conv3"
}

layer {
    name: "conv4"
    type: "Convolution"

    bottom: "conv3"
    top:    "conv4"
  
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    } 
  
    convolution_param {
        num_output: 512
        
        pad: 1
        kernel_size: 3
    
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}

layer {
    name: "relu4"
    type: "ReLU"
  
    bottom: "conv4"
    top:    "conv4"
}

layer {
    name: "pool4"
    type: "Pooling"
  
    bottom: "conv4"  
    top:    "pool4"
    
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "conv5"
    type: "Convolution"

    bottom: "pool4"
    top:    "conv5"
  
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    } 
  
    convolution_param {
        num_output: 384
        
        pad: 1
        kernel_size: 3
    
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}

layer {
    name: "relu5"
    type: "ReLU"
  
    bottom: "conv5"
    top:    "conv5"
}

layer {
    name: "pool5"
    type: "Pooling"
  
    bottom: "conv5"  
    top:    "pool5"
    
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
    name: "ip1"
    type: "InnerProduct"
 
    bottom: "pool5"
    top:    "ip1"
  
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }
  
    inner_product_param {
        num_output: 1024
        
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}

layer {
    name: "relu_ip_1"
    type: "ReLU"
  
    bottom: "ip1"
    top:    "ip1"
}

layer {
    name: "ip2"
    type: "InnerProduct"

    bottom: "ip1"
    top: "ip2"
  
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }
  
    inner_product_param {
        num_output: 8
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
    }
}
